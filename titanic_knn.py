# -*- coding: utf-8 -*-
"""titanic_KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xM9A5SBClrIS8DIppLTvIwZADFZzXoWe
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import cross_val_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
data_train=pd.read_csv("train.csv")
data_train.head(10)
data_test=pd.read_csv("test.csv")
data_lable=pd.read_csv("gender_submission.csv")

#converting string to int
 #we can also use data_train.replace(["female","male"],[0,1],inplace=True)
le =LabelEncoder()

data_train["Sex"]= le.fit_transform(data_train["Sex"])
#fill missing values
data_train.fillna(0,inplace=True)
data_train

## defining X_train and Y_train
X_train=np.array(data_train[["Pclass","Sex","Age","SibSp","Fare","Parch"]])
Y_train=np.array(data_train[["Survived"]])

##training part
neighbors = list(range(1, 31))
cv_scores = []
for k in neighbors:
    knn_classifier = KNeighborsClassifier(n_neighbors=k)
    scores = cross_val_score(knn_classifier,X_train,Y_train, cv=10, scoring='accuracy')
    cv_scores.append(np.mean(scores))
    optimal_k = neighbors[cv_scores.index(max(cv_scores))]

print("Optimal number of neighbors:", optimal_k)

knn_classifier = KNeighborsClassifier(n_neighbors=10)

knn_classifier.fit(X_train, Y_train)

le =LabelEncoder()

data_test["Sex"]= le.fit_transform(data_test["Sex"])
#fill missing values
data_test.fillna(0,inplace=True)
data_test

## defining X_test and Y_test
X_test=np.array(data_test[["Pclass","Sex","Age","SibSp","Fare","Parch"]])
Y_test=np.array(data_lable[["Survived"]])

##testing part
y_pred = knn_classifier.predict(X_test)

accuracy = accuracy_score(Y_test, y_pred)
print("Accuracy:", accuracy)

plt.plot(neighbors, cv_scores, marker='o')
plt.title('Accuracy vs. Number of Neighbors')
plt.xlabel('Number of Neighbors (n)')
plt.ylabel('Accuracy')
plt.xticks(neighbors)
plt.grid(True)
plt.show()

